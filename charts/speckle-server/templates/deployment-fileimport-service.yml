{{- if .Values.s3.endpoint }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "speckle.fullname.fileimport-service" $ }}
  namespace: {{ .Values.namespace }}
  labels:
{{ include "speckle.labels.fileimport-service" $ | indent 4 }}
spec:
  replicas: {{ .Values.fileimport_service.replicas }}
  selector:
    matchLabels:
{{ include "speckle.selectorLabels.fileimport-service" $ | indent 6 }}
  template:
    metadata:
      labels:
{{ include "speckle.labels.fileimport-service" $ | indent 8 }}
    spec:
      priorityClassName: low-priority

      {{- if .Values.db.useCertificate -}}
      volumes:
        - name: postgres-certificate
          configMap:
            name: postgres-certificate
      {{- end -}}

      # Should be > File import timeout to allow finishing up imports
      terminationGracePeriodSeconds: 610

      containers:
      - name: main
        image: speckle/speckle-fileimport-service:{{ .Values.docker_image_tag }}

        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 60
          exec:
            command:
              - node
              - -e
              - process.exit(Date.now() - require('fs').readFileSync('/tmp/last_successful_query', 'utf8') > 25 * 60 * 1000)

        resources:
          requests:
            cpu: {{ .Values.fileimport_service.requests.cpu }}
            memory: {{ .Values.fileimport_service.requests.memory }}
          limits:
            cpu: {{ .Values.fileimport_service.limits.cpu }}
            memory: {{ .Values.fileimport_service.limits.memory }}

        {{- if .Values.db.useCertificate }}
        volumeMounts:
          - name: postgres-certificate
            mountPath: /postgres-certificate
        {{- end }}

        env:
          - name: SPECKLE_SERVER_URL
            value: "http://speckle-server:3000"
            
          - name: PG_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secretName }}
                key: postgres_url

          - name: DEBUG
            value: "fileimport-service:*"

          {{- if .Values.db.useCertificate }}
          - name: NODE_EXTRA_CA_CERTS
            value: "/postgres-certificate/ca-certificate.crt"
          {{- end }}


          - name: S3_ENDPOINT
            value: {{ .Values.s3.endpoint }}
          - name: S3_ACCESS_KEY
            value: {{ .Values.s3.access_key }}
          - name: S3_BUCKET
            value: {{ .Values.s3.bucket }}
          - name: S3_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secretName }}
                key: s3_secret_key


{{- end }}
